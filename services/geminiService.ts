
import { GoogleGenAI, Modality } from "@google/genai";
import type { ImageData } from '../types';

if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const generateHuggingImage = async (childPhoto: ImageData, adultPhoto: ImageData): Promise<string> => {
  try {
    const prompt = "Please create a photorealistic image where the adult from the second image is gently and lovingly hugging the child from the first image. The interaction should feel natural and heartwarming, as if a person is meeting and comforting their younger self. Blend them seamlessly into a single scene. Apply soft, natural studio lighting. Replace the original backgrounds of both photos with a smooth, clean, and soft white background.";

    const response = await ai.models.generateContent({
      model: 'gemini-2.5-flash-image',
      contents: {
        parts: [
          // The API expects the images first, then the prompt.
          { inlineData: { data: childPhoto.data, mimeType: childPhoto.mimeType } },
          { inlineData: { data: adultPhoto.data, mimeType: adultPhoto.mimeType } },
          { text: prompt },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });
    
    // Check for candidates and parts
    if (!response.candidates || response.candidates.length === 0 || !response.candidates[0].content.parts) {
        throw new Error("Invalid response structure from Gemini API.");
    }

    for (const part of response.candidates[0].content.parts) {
      if (part.inlineData && part.inlineData.data) {
        const base64ImageBytes: string = part.inlineData.data;
        // The API returns a raw base64 string, so we prepend the data URL header.
        return `data:image/png;base64,${base64ImageBytes}`;
      }
    }

    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    // Re-throw the error to be handled by the calling function
    throw new Error("An error occurred while communicating with the image generation service.");
  }
};
